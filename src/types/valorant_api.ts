export interface Version {
  status: number;
  data: VersionData;
}

export interface VersionData {
  manifestId: string;
  branch: string;
  version: string;
  buildVersion: string;
  engineVersion: string;
  riotClientVersion: string;
  riotClientBuild: string;
  buildDate: string;
}

export interface Agents {
  status: number;
  data: Agent[];
}

export interface Agent {
  uuid: string;
  displayName: string;
  description: string;
  developerName: string;
  characterTags: string[] | null;
  displayIcon: string;
  displayIconSmall: string;
  bustPortrait: null | string;
  fullPortrait: null | string;
  fullPortraitV2: null | string;
  killfeedPortrait: string;
  background: null | string;
  backgroundGradientColors: string[];
  assetPath: string;
  isFullPortraitRightFacing: boolean;
  isPlayableCharacter: boolean;
  isAvailableForTest: boolean;
  isBaseContent: boolean;
  role: Role | null;
  abilities: Ability[];
  voiceLine: VoiceLine;
}

export interface Ability {
  slot: Slot;
  displayName: string;
  description: string;
  displayIcon: null | string;
}

export enum Slot {
  Ability1 = "Ability1",
  Ability2 = "Ability2",
  Grenade = "Grenade",
  Passive = "Passive",
  Ultimate = "Ultimate",
}

export interface Role {
  uuid: string;
  displayName: DisplayName;
  description: string;
  displayIcon: string;
  assetPath: string;
}

export enum DisplayName {
  Controller = "Controller",
  Duelist = "Duelist",
  Initiator = "Initiator",
  Sentinel = "Sentinel",
}

export interface VoiceLine {
  minDuration: number;
  maxDuration: number;
  mediaList: MediaList[];
}

export interface MediaList {
  id: number;
  wwise: string;
  wave: string;
}

// Generated by https://quicktype.io

export interface Maps {
  status: number;
  data: Map[];
}

export interface Map {
  uuid: string;
  displayName: string;
  coordinates: string;
  displayIcon: null | string;
  listViewIcon: string;
  splash: string;
  assetPath: string;
  mapUrl: string;
  xMultiplier: number;
  yMultiplier: number;
  xScalarToAdd: number;
  yScalarToAdd: number;
  callouts: Callout[] | null;
}

export interface Callout {
  regionName: string;
  superRegionName: SuperRegionName;
  location: Location;
}

export interface Location {
  x: number;
  y: number;
}

export enum SuperRegionName {
  A = "A",
  AttackerSide = "Attacker Side",
  B = "B",
  C = "C",
  DefenderSide = "Defender Side",
  Mid = "Mid",
}
